<!DOCTYPE html>
<!--
 | Generated by Apache Maven Doxia at 2013-11-17
 | Rendered using Apache Maven Fluido Skin 1.3.0
-->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh" lang="zh"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="author" content="Clinton Begin">
    <meta name="author" content="Nan Lei">
    <meta name="Date-Revision-yyyymmdd" content="20131117">
    <meta http-equiv="Content-Language" content="zh">
    <title>MyBatis - 
    MyBatis 3 | XML 映射配置文件</title>
   <link rel="stylesheet" href="apache-maven-fluido-1.css">
    <link rel="stylesheet" href="site.css">
    <link rel="stylesheet" href="print.css" media="print">

      
    <script type="text/javascript" src="apache-maven-fluido-1.js"></script>

    
            </head>
        <body class="topBarDisabled">
          
        
    
        <div class="container-fluid">
          <div id="banner">
        <div class="pull-left">
                                <div id="bannerLeft">
                <h2>MyBatis</h2>
                </div>
                      </div>
        <div class="pull-right">                                <a href="http://mybatis.github.io/mybatis-3/" id="bannerRight" title="MyBatis logo">
                                                                                        <img src="MyBatis%20-%20MyBatis%203%20_%20XML%20%E6%98%A0%E5%B0%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6_files/mybatis-logo.png" alt="MyBatis logo">
                </a>
      </div>
        <div class="clear"><hr></div>
      </div>

      <div id="breadcrumbs">
        <ul class="breadcrumb">
                
                    
                  <li id="publishDate">最近更新: 17 十一月 2013</li>
                  <li class="divider">|</li> <li id="projectVersion">版本: 3.2.4-SNAPSHOT</li>
                      
                
                    
      
                            </ul>
      </div>

            
      <div class="row-fluid">
        <div id="leftColumn" class="span3">
          <div class="well sidebar-nav">
                
                    
                <ul class="nav nav-list">
                    <li class="nav-header">Core</li>
                                
      <li>
    
                          <a href="http://mybatis.github.io/mybatis-3/zh/index.html" title="Introduction">
          <i class="none"></i>
        Introduction</a>
            </li>
                  
      <li>
    
                          <a href="http://mybatis.github.io/mybatis-3/zh/getting-started.html" title="入门">
          <i class="none"></i>
        入门</a>
            </li>
                                                                        
                                                                        
                                                                        
      <li class="active">
    
            <a href="#"><i class="icon-chevron-down"></i>XML 映射配置文件</a>
                  <ul class="nav nav-list">
                      
      <li>
    
                          <a href="http://mybatis.github.io/mybatis-3/zh/configuration.html#properties" title="properties">
          <i class="none"></i>
        properties</a>
            </li>
                      
      <li>
    
                          <a href="http://mybatis.github.io/mybatis-3/zh/configuration.html#settings" title="settings">
          <i class="none"></i>
        settings</a>
            </li>
                      
      <li>
    
                          <a href="http://mybatis.github.io/mybatis-3/zh/configuration.html#typeAliases" title="typeAliases">
          <i class="none"></i>
        typeAliases</a>
            </li>
                      
      <li>
    
                          <a href="http://mybatis.github.io/mybatis-3/zh/configuration.html#typeHandlers" title="typeHandlers">
          <i class="none"></i>
        typeHandlers</a>
            </li>
                      
      <li>
    
                          <a href="http://mybatis.github.io/mybatis-3/zh/configuration.html#objectFactory" title="objectFactory">
          <i class="none"></i>
        objectFactory</a>
            </li>
                      
      <li>
    
                          <a href="http://mybatis.github.io/mybatis-3/zh/configuration.html#plugins" title="plugins">
          <i class="none"></i>
        plugins</a>
            </li>
                      
      <li>
    
                          <a href="http://mybatis.github.io/mybatis-3/zh/configuration.html#environments" title="environments">
          <i class="none"></i>
        environments</a>
            </li>
                      
      <li>
    
                          <a href="http://mybatis.github.io/mybatis-3/zh/configuration.html#databaseIdProvider" title="databaseIdProvider">
          <i class="none"></i>
        databaseIdProvider</a>
            </li>
                      
      <li>
    
                          <a href="http://mybatis.github.io/mybatis-3/zh/configuration.html#mappers" title="mappers">
          <i class="none"></i>
        mappers</a>
            </li>
              </ul>
        </li>
                                                                        
                                                                        
              
      <li>
    
                          <a href="http://mybatis.github.io/mybatis-3/zh/sqlmap-xml.html" title="Mapper XML 文件">
          <i class="icon-chevron-right"></i>
        Mapper XML 文件</a>
                  </li>
                  
      <li>
    
                          <a href="http://mybatis.github.io/mybatis-3/zh/dynamic-sql.html" title="动态 SQL">
          <i class="none"></i>
        动态 SQL</a>
            </li>
                                                                                      
      <li>
    
                          <a href="http://mybatis.github.io/mybatis-3/zh/java-api.html" title="Java API">
          <i class="icon-chevron-right"></i>
        Java API</a>
                  </li>
                                                                                      
      <li>
    
                          <a href="http://mybatis.github.io/mybatis-3/zh/statement-builders.html" title="Statement Builders">
          <i class="icon-chevron-right"></i>
        Statement Builders</a>
                  </li>
                  
      <li>
    
                          <a href="http://mybatis.github.io/mybatis-3/zh/logging.html" title="Logging">
          <i class="none"></i>
        Logging</a>
            </li>
                              <li class="nav-header">项目文档</li>
                                                                        
                                                                        
                                                                        
                                                                
      <li>
    
                          <a href="http://mybatis.github.io/mybatis-3/zh/project-info.html" title="项目信息">
          <i class="icon-chevron-right"></i>
        项目信息</a>
                  </li>
                                                                        
                                                                        
                                                                        
                                
      <li>
    
                          <a href="http://mybatis.github.io/mybatis-3/zh/project-reports.html" title="项目报表">
          <i class="icon-chevron-right"></i>
        项目报表</a>
                  </li>
            </ul>
                
                    
                
          <hr class="divider">

           <div id="poweredBy">
                            <div class="clear"></div>
                            <div class="clear"></div>
                            <div class="clear"></div>
                             <a href="http://maven.apache.org/" title="构建依靠 Maven" class="poweredBy">
        <img class="builtBy" alt="构建依靠 Maven" src="MyBatis%20-%20MyBatis%203%20_%20XML%20%E6%98%A0%E5%B0%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6_files/maven-feather.png">
      </a>
                  </div>
          </div>
        </div>
        
                
        <div id="bodyColumn" class="span9">
                                  
            <!-- Copyright 2010-2012 the original author or authors.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License. --><!-- version: $Id$ -->

  
    <div class="section"><h2>XML 映射配置文件<a name="XML_"></a></h2>
      <p>
MyBatis 的 XML 配置文件包含了影响 MyBatis 行为甚深的设置和属性信息。
XML 文档
的高层级结构如下:
      </p>

      <ul>
        <li>
          configuration 配置
          <ul>
            <li><a href="#properties">properties 属性</a></li>
            <li><a href="#settings">settings 设置</a></li>
            <li><a href="#typeAliases">typeAliases 类型命名</a></li>
            <li><a href="#typeHandlers">typeHandlers 类型处理器</a></li>
            <li><a href="#objectFactory">objectFactory 对象工厂</a></li>
            <li><a href="#plugins">plugins 插件</a></li>
            <li><a href="#environments">environments 环境</a>
              <ul>
                <li>
                  environment 环境变量
                  <ul>
                    <li>transactionManager 事务管理器</li>
                    <li>dataSource 数据源</li>
                  </ul>
                </li>
              </ul>
            </li>
            <li><a href="#databaseIdProvider">databaseIdProvider chinese?</a></li>
            <li><a href="#mappers">mappers 映射器</a></li>
          </ul>
        </li>
      </ul>
      <div class="section"><h3>properties<a name="properties"></a></h3>
        <p>
这些是外部化的,
可替代的属性,
这些属性也可以配置在典型的 Java 属性配置文件中,
或者通过 properties 元素的子元素来传递。例如:
        </p>
        <div class="source"><pre class="prettyprint"><span class="tag">&lt;properties</span><span class="pln"> </span><span class="atn">resource</span><span class="pun">=</span><span class="atv">"org/mybatis/example/config.properties"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"username"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"dev_user"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"password"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"F2Fa3!33TYyg"</span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/properties&gt;</span></pre></div>
        <p>
其中的属性就可以在整个配置文件中使用,使用可替换的属性来实现动态配置。比如:
        </p>
        <div class="source"><pre class="prettyprint"><span class="tag">&lt;dataSource</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"POOLED"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"driver"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"${driver}"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"url"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"${url}"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"username"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"${username}"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"password"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"${password}"</span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/dataSource&gt;</span></pre></div>
        <p>
这个例子中的 username 和 password 将会由 properties 元素中设置的值来替换。
driver 和
url 属性将会从包含进来的 config.properties 文件中的值来替换。这里提供很多配置的选项。
        </p>
        <p>
属性也可以被传递到 SqlSessionBuilder.build()方法中。例如:
        </p>
        <div class="source"><pre class="prettyprint"><span class="typ">SqlSessionFactory</span><span class="pln"> factory </span><span class="pun">=</span><span class="pln"> sqlSessionFactoryBuilder</span><span class="pun">.</span><span class="pln">build</span><span class="pun">(</span><span class="pln">reader</span><span class="pun">,</span><span class="pln"> props</span><span class="pun">);</span><span class="pln">

</span><span class="com">// ... or ...</span><span class="pln">

</span><span class="typ">SqlSessionFactory</span><span class="pln"> factory </span><span class="pun">=</span><span class="pln"> sqlSessionFactoryBuilder</span><span class="pun">.</span><span class="pln">build</span><span class="pun">(</span><span class="pln">reader</span><span class="pun">,</span><span class="pln"> environment</span><span class="pun">,</span><span class="pln"> props</span><span class="pun">);</span></pre></div>
        <p>
如果在这些地方,属性多于一个的话,MyBatis 按照如下的顺序加载它们:
        </p>
        <ul>
          <li>在 properties 元素体内指定的属性首先被读取。
          </li>
          <li>从类路径下资源或 properties 元素的 url 属性中加载的属性第二被读取,它会
覆盖已经存在的完全一样的属性。
          </li>
          <li>作为方法参数传递的属性最后被读取,
它也会覆盖任一已经存在的完全一样的
属性,这些属性可能是从 properties 元素体内和资源/url 属性中加载的。
          </li>
        </ul>
        <p>
因此,
最高优先级的属性是那些作为方法参数的,
然后是资源/url 属性,
最后是 properties
元素中指定的属性。
        </p>
      </div>
      <div class="section"><h3>settings<a name="settings"></a></h3>
        <p>
这些是极其重要的调整,
它们会修改 MyBatis 在运行时的行为方式。
下面这个表格描述
了设置信息,它们的含义和默认值。
        </p>

        <table class="table table-striped" border="0">
          <thead>
            <tr class="a">
              <th>设置参数</th>
              <th>描述</th>
              <th>有效值</th>
              <th>默认值</th>
            </tr>
          </thead>
          <tbody>
            <tr class="b">
              <td>
                cacheEnabled
              </td>
              <td>
              这个配置使全局的映射器启用或禁用 缓存。 
              </td>
              <td>
                true | false
              </td>
              <td>
                true
              </td>
            </tr>
            <tr class="a">
              <td>
                lazyLoadingEnabled
              </td>
              <td>
                全局启用或禁用延迟加载。当禁用时, 所有关联对象都会即时加载。 
              </td>
              <td>
                true | false
              </td>
              <td>
                true
              </td>
            </tr>
            <tr class="b">
              <td>
                aggressiveLazyLoading
              </td>
              <td>
              当启用时, 有延迟加载属性的对象在被 
              调用时将会完全加载任意属性。否则, 
              每种属性将会按需要加载。
              </td>
              <td>
                true | false
              </td>
              <td>
                true
              </td>
            </tr>
            <tr class="a">
              <td>
                multipleResultSetsEnabled
              </td>
              <td>
                允许或不允许多种结果集从一个单独 
                的语句中返回(需要适合的驱动) 
              </td>
              <td>
                true | false
              </td>
              <td>
                true
              </td>
            </tr>
            <tr class="b">
              <td>
                useColumnLabel
              </td>
              <td>
                使用列标签代替列名。
                不同的驱动在这 
                方便表现不同。 
                参考驱动文档或充分测 
                试两种方法来决定所使用的驱动。
              </td>
              <td>
                true | false
              </td>
              <td>
                true
              </td>
            </tr>
            <tr class="a">
              <td>
                useGeneratedKeys
              </td>
              <td>
                允许 JDBC 支持生成的键。 
                需要适合的 
                驱动。 
                如果设置为 true 则这个设置强制 
                生成的键被使用, 
                尽管一些驱动拒绝兼 
                容但仍然有效(比如 Derby) 
              </td>
              <td>
                true | false
              </td>
              <td>
                False
              </td>
            </tr>
            <tr class="b">
              <td>
                autoMappingBehavior
              </td>
              <td>
                指定 MyBatis 如何自动映射列到字段/
                属性。PARTIAL 只会自动映射简单, 
                没有嵌套的结果。FULL 会自动映射任 
                意复杂的结果(嵌套的或其他情况)                   。 
              </td>
              <td>
                NONE, PARTIAL, FULL
              </td>
              <td>
                PARTIAL
              </td>
            </tr>
            <tr class="a">
              <td>
                defaultExecutorType
              </td>
              <td>
                配置默认的执行器。SIMPLE 执行器没 
                有什么特别之处。REUSE 执行器重用 
                预处理语句。BATCH 执行器重用语句 
                和批量更新
              </td>
              <td>
                SIMPLE
                REUSE
                BATCH
              </td>
              <td>
                SIMPLE
              </td>
            </tr>
            <tr class="b">
              <td>
                defaultStatementTimeout
              </td>
              <td>
                设置超时时间,
                它决定驱动等待一个数
                据库响应的时间。
              </td>
              <td>
                Any positive integer
              </td>
              <td>
                Not Set (null)
              </td>
            </tr>
            <tr class="a">
              <td>
                safeRowBoundsEnabled
              </td>
              <td>
                Allows using RowBounds on nested
                statements.
              </td>
              <td>
                true | false
              </td>
              <td>
                False
              </td>
            </tr>
            <tr class="b">
              <td>
                mapUnderscoreToCamelCase
              </td>
              <td>
                Enables automatic mapping from
                classic database column names
                A_COLUMN to camel case classic Java
                property names aColumn.
              </td>
              <td>
                true | false
              </td>
              <td>
                False
              </td>
            </tr>
            <tr class="a">
              <td>
                localCacheScope
              </td>
              <td>
                MyBatis uses local cache to prevent circular references 
and speed up repeated nested queries. 
                By default (SESSION) all queries executed during a 
session are cached. If localCacheScope=STATEMENT local session will be 
used just for 
                statement execution, no data will be shared between two 
different calls to the same SqlSession.
              </td>
              <td>
                SESSION | STATEMENT
              </td>
              <td>
                SESSION
              </td>
            </tr>
            <tr class="b">
              <td>
                jdbcTypeForNull
              </td>
              <td>
                Specifies the JDBC type for null values when no specific
 JDBC type was provided for the parameter. 
                Some drivers require specifying the column JDBC type but
 others work with generic values like NULL, VARCHAR or OTHER.
              </td>
              <td>
                JdbcType enumeration. Most common are: NULL, VARCHAR and OTHER
              </td>
              <td>
                OTHER
              </td>
            </tr>
            <tr class="a">
              <td>
                lazyLoadTriggerMethods
              </td>
              <td>
                Specifies which Object's methods trigger a lazy load
              </td>
              <td>
                A method name list separated by commas
              </td>
              <td>
                equals,clone,hashCode,toString
              </td>
            </tr>
            <tr class="b">
              <td>
                defaultScriptingLanguage
              </td>
              <td>
                Specifies the language used by default for dynamic SQL generation.
              </td>
              <td>
                A type alias or fully qualified class name.
              </td>
              <td>
                org.apache.ibatis.scripting.xmltags.XMLDynamicLanguageDriver
              </td>
            </tr>
            <tr class="a">
              <td>
                callSettersOnNulls
              </td>
              <td>				当结果集中含有Null值时是否执行映射对象的setter或者Map对象的put方法。此设置对于原始类型如int,boolean等无效。
              </td>
              <td>
                true | false
              </td>
              <td>
                false
              </td>
            </tr>
            <tr class="b">
              <td>
                logPrefix
              </td>
              <td>
                Specifies the prefix string that MyBatis will add to the logger names. 
              </td>
              <td>
                Any String
              </td>
              <td>
                Not set
              </td>
            </tr>
            <tr class="a">
              <td>
                logImpl
              </td>
              <td>
                Specifies which logging implementation MyBatis should 
use. If this setting is not present logging implementation will be 
autodiscovered. 
              </td>
              <td>
                SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING
              </td>
              <td>
                Not set
              </td>
            </tr>
            <tr class="b">
              <td>
                proxyFactory
              </td>
              <td>
                Specifies the proxy tool that MyBatis will use for creating lazy loading capable objects.
              </td>
              <td>
                CGLIB | JAVASSIST
              </td>
              <td>
                CGLIB
              </td>
            </tr>
          </tbody>
        </table>
        <p>
          一个设置信息元素的示例,完全的配置如下所示:
        </p>
        <div class="source"><pre class="prettyprint"><span class="tag">&lt;settings&gt;</span><span class="pln">
  </span><span class="tag">&lt;setting</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"cacheEnabled"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"true"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;setting</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"lazyLoadingEnabled"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"true"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;setting</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"multipleResultSetsEnabled"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"true"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;setting</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"useColumnLabel"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"true"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;setting</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"useGeneratedKeys"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"false"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;setting</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"autoMappingBehavior"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"PARTIAL"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;setting</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"defaultExecutorType"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"SIMPLE"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;setting</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"defaultStatementTimeout"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"25"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;setting</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"safeRowBoundsEnabled"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"false"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;setting</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"mapUnderscoreToCamelCase"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"false"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;setting</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"localCacheScope"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"SESSION"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;setting</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"jdbcTypeForNull"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"OTHER"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;setting</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"lazyLoadTriggerMethods"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"equals,clone,hashCode,toString"</span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/settings&gt;</span></pre></div>

      </div>
      <div class="section"><h3>typeAliases<a name="typeAliases"></a></h3>
        <p>
          类型别名是为 Java 类型命名一个短的名字。
它只和 XML 配置有关,
只用来减少类完全
限定名的多余部分。例如:
        </p>
        <div class="source"><pre class="prettyprint"><span class="tag">&lt;typeAliases&gt;</span><span class="pln">
  </span><span class="tag">&lt;typeAlias</span><span class="pln"> </span><span class="atn">alias</span><span class="pun">=</span><span class="atv">"Author"</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"domain.blog.Author"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;typeAlias</span><span class="pln"> </span><span class="atn">alias</span><span class="pun">=</span><span class="atv">"Blog"</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"domain.blog.Blog"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;typeAlias</span><span class="pln"> </span><span class="atn">alias</span><span class="pun">=</span><span class="atv">"Comment"</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"domain.blog.Comment"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;typeAlias</span><span class="pln"> </span><span class="atn">alias</span><span class="pun">=</span><span class="atv">"Post"</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"domain.blog.Post"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;typeAlias</span><span class="pln"> </span><span class="atn">alias</span><span class="pun">=</span><span class="atv">"Section"</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"domain.blog.Section"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;typeAlias</span><span class="pln"> </span><span class="atn">alias</span><span class="pun">=</span><span class="atv">"Tag"</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"domain.blog.Tag"</span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/typeAliases&gt;</span></pre></div>
        <p>
使用这个配置,
“Blog”可以任意用来替代“domain.blog. Blog”所使用的地方。
        </p>
        <p> You can also specify a package where MyBatis will search for
          beans. For example:
        </p>
        <div class="source"><pre class="prettyprint"><span class="tag">&lt;typeAliases&gt;</span><span class="pln">
  </span><span class="tag">&lt;package</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"domain.blog"</span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/typeAliases&gt;</span></pre></div>
        <p>
          Each bean found in
          <tt>domain.blog</tt>
          , if no annotation is found,
          will be registered as an alias
          using
          uncapitalized non-qualified class name of the bean. Thas is
          <tt>domain.blog.Author</tt>
          will be registered as
          <tt>Author</tt>
          . If the
          <tt>@Alias</tt>
          annotation is found its value will
          be used as an alias. See the example below:
        </p>
        <div class="source"><pre class="prettyprint"><span class="lit">@Alias</span><span class="pun">(</span><span class="str">"author"</span><span class="pun">)</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Author</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="pun">...</span><span class="pln">
</span><span class="pun">}</span></pre></div>
        <p>
对于普通的 Java 类型,有许多内建的类型别名。它们都是大小写不敏感的,由于重载
的名字,要注意原生类型的特殊处理。
        </p>
        <table class="table table-striped" border="0">
          <thead>
            <tr class="a">
              <th>
                别名
              </th>
              <th>
                映射的类型
              </th>
            </tr>
          </thead>
          <tbody>
            <tr class="b">
              <td>
                _byte
              </td>
              <td>
                byte
              </td>
            </tr>
            <tr class="a">
              <td>
                _long
              </td>
              <td>
                long
              </td>
            </tr>
            <tr class="b">
              <td>
                _short
              </td>
              <td>
                short
              </td>
            </tr>
            <tr class="a">
              <td>
                _int
              </td>
              <td>
                int
              </td>
            </tr>
            <tr class="b">
              <td>
                _integer
              </td>
              <td>
                int
              </td>
            </tr>
            <tr class="a">
              <td>
                _double
              </td>
              <td>
                double
              </td>
            </tr>
            <tr class="b">
              <td>
                _float
              </td>
              <td>
                float
              </td>
            </tr>
            <tr class="a">
              <td>
                _boolean
              </td>
              <td>
                boolean
              </td>
            </tr>
            <tr class="b">
              <td>
                string
              </td>
              <td>
                String
              </td>
            </tr>
            <tr class="a">
              <td>
                byte
              </td>
              <td>
                Byte
              </td>
            </tr>
            <tr class="b">
              <td>
                long
              </td>
              <td>
                Long
              </td>
            </tr>
            <tr class="a">
              <td>
                short
              </td>
              <td>
                Short
              </td>
            </tr>
            <tr class="b">
              <td>
                int
              </td>
              <td>
                Integer
              </td>
            </tr>
            <tr class="a">
              <td>
                integer
              </td>
              <td>
                Integer
              </td>
            </tr>
            <tr class="b">
              <td>
                double
              </td>
              <td>
                Double
              </td>
            </tr>
            <tr class="a">
              <td>
                float
              </td>
              <td>
                Float
              </td>
            </tr>
            <tr class="b">
              <td>
                boolean
              </td>
              <td>
                Boolean
              </td>
            </tr>
            <tr class="a">
              <td>
                date
              </td>
              <td>
                Date
              </td>
            </tr>
            <tr class="b">
              <td>
                decimal
              </td>
              <td>
                BigDecimal
              </td>
            </tr>
            <tr class="a">
              <td>
                bigdecimal
              </td>
              <td>
                BigDecimal
              </td>
            </tr>
            <tr class="b">
              <td>
                object
              </td>
              <td>
                Object
              </td>
            </tr>
            <tr class="a">
              <td>
                map
              </td>
              <td>
                Map
              </td>
            </tr>
            <tr class="b">
              <td>
                hashmap
              </td>
              <td>
                HashMap
              </td>
            </tr>
            <tr class="a">
              <td>
                list
              </td>
              <td>
                List
              </td>
            </tr>
            <tr class="b">
              <td>
                arraylist
              </td>
              <td>
                ArrayList
              </td>
            </tr>
            <tr class="a">
              <td>
                collection
              </td>
              <td>
                Collection
              </td>
            </tr>
            <tr class="b">
              <td>
                iterator
              </td>
              <td>
                Iterator
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <div class="section"><h3>typeHandlers<a name="typeHandlers"></a></h3>
        <p>
无论是 MyBatis 在预处理语句中设置一个参数,
还是从结果集中取出一个值时,
类型处
理器被用来将获取的值以合适的方式转换成 Java 类型。下面这个表格描述了默认的类型处
理器。
        </p>
        <table class="table table-striped" border="0">
          <thead>
            <tr class="a">
              <th>
                类型处理器
              </th>
              <th>
                Java 类型 
              </th>
              <th>
                JDBC 类型
              </th>
            </tr>
          </thead>
          <tbody>
            <tr class="b">
              <td>
                <tt>BooleanTypeHandler</tt>
              </td>
              <td>
                <tt>java.lang.Boolean</tt>, <tt>boolean</tt>
              </td>
              <td>
                任何兼容的布尔值
              </td>
            </tr>
            <tr class="a">
              <td>
                <tt>ByteTypeHandler</tt>
              </td>
              <td>
                <tt>java.lang.Byte</tt>, byte
              </td>
              <td>
                任何兼容的数字或字节类型
              </td>
            </tr>
            <tr class="b">
              <td>
                <tt>ShortTypeHandler</tt>
              </td>
              <td>
                <tt>java.lang.Short</tt>, <tt>short</tt>
              </td>
              <td>
                任何兼容的数字或短整型
              </td>
            </tr>
            <tr class="a">
              <td>
                <tt>IntegerTypeHandler</tt>
              </td>
              <td>
                <tt>java.lang.Integer</tt>, <tt>int</tt>
              </td>
              <td>
                任何兼容的数字和整型
              </td>
            </tr>
            <tr class="b">
              <td>
                <tt>LongTypeHandler</tt>
              </td>
              <td>
                <tt>java.lang.Long</tt>, <tt>long</tt>
              </td>
              <td>
                任何兼容的数字或长整型
              </td>
            </tr>
            <tr class="a">
              <td>
                <tt>FloatTypeHandler</tt>
              </td>
              <td>
                <tt>java.lang.Float</tt>, float
              </td>
              <td>
                任何兼容的数字或单精度浮点型
              </td>
            </tr>
            <tr class="b">
              <td>
                <tt>DoubleTypeHandler</tt>
              </td>
              <td>
                <tt>java.lang.Double</tt>, <tt>double</tt>
              </td>
              <td>
                任何兼容的数字或双精度浮点型
              </td>
            </tr>
            <tr class="a">
              <td>
                <tt>BigDecimalTypeHandler</tt>
              </td>
              <td>
                <tt>java.math.BigDecimal</tt>
              </td>
              <td>
                任何兼容的数字或十进制小数类型
              </td>
            </tr>
            <tr class="b">
              <td>
                <tt>StringTypeHandler</tt>
              </td>
              <td>
                <tt>java.lang.String</tt>
              </td>
              <td>
                CHAR 和 VARCHAR 类型
              </td>
            </tr>
            <tr class="a">
              <td>
                <tt>ClobTypeHandler</tt>
              </td>
              <td>
                <tt>java.lang.String</tt>
              </td>
              <td>
                CLOB 和 LONGVARCHAR 类型
              </td>
            </tr>
            <tr class="b">
              <td>
                <tt>NStringTypeHandler</tt>
              </td>
              <td>
                <tt>java.lang.String</tt>
              </td>
              <td>
                NVARCHAR 和 NCHAR 类型
              </td>
            </tr>
            <tr class="a">
              <td>
                <tt>NClobTypeHandler</tt>
              </td>
              <td>
                <tt>java.lang.String</tt>
              </td>
              <td>
                NCLOB 类型
              </td>
            </tr>
            <tr class="b">
              <td>
                <tt>ByteArrayTypeHandler</tt>
              </td>
              <td>
                <tt>byte[]</tt>
              </td>
              <td>
                任何兼容的字节流类型
              </td>
            </tr>
            <tr class="a">
              <td>
                <tt>BlobTypeHandler</tt>
              </td>
              <td>
                <tt>byte[]</tt>
              </td>
              <td>
                BLOB 和 LONGVARBINARY 类型
              </td>
            </tr>
            <tr class="b">
              <td>
                <tt>DateTypeHandler</tt>
              </td>
              <td>
                <tt>java.util.Date</tt>
              </td>
              <td>
                TIMESTAMP 类型
              </td>
            </tr>
            <tr class="a">
              <td>
                <tt>DateOnlyTypeHandler</tt>
              </td>
              <td>
                <tt>java.util.Date</tt>
              </td>
              <td>
                DATE 类型
              </td>
            </tr>
            <tr class="b">
              <td>
                <tt>TimeOnlyTypeHandler</tt>
              </td>
              <td>
                <tt>java.util.Date</tt>
              </td>
              <td>
                TIME 类型
              </td>
            </tr>
            <tr class="a">
              <td>
                <tt>SqlTimestampTypeHandler</tt>
              </td>
              <td>
                <tt>java.sql.Timestamp</tt>
              </td>
              <td>
                TIMESTAMP 类型
              </td>
            </tr>
            <tr class="b">
              <td>
                <tt>SqlDateTypeHandler</tt>
              </td>
              <td>
                <tt>java.sql.Date</tt>
              </td>
              <td>
                DATE 类型
              </td>
            </tr>
            <tr class="a">
              <td>
                <tt>SqlTimeTypeHandler</tt>
              </td>
              <td>
                <tt>java.sql.Time</tt>
              </td>
              <td>
                TIME 类型
              </td>
            </tr>
            <tr class="b">
              <td>
                <tt>ObjectTypeHandler</tt>
              </td>
              <td>
                Any
              </td>
              <td>
                其他或未指定类型
              </td>
            </tr>
            <tr class="a">
              <td>
                <tt>EnumTypeHandler</tt>
              </td>
              <td>
                Enumeration Type
              </td>
              <td>
                VARCHAR-任何兼容的字符串类型,
                作为代码存储(而不是索引)
              </td>
            </tr>
            <tr class="b">
              <td>
                <tt>EnumOrdinalTypeHandler</tt>
              </td>
              <td>
                Enumeration Type
              </td>
              <td>
                Any compatible <tt>NUMERIC</tt> or <tt>DOUBLE</tt>, as the position is stored
                (not the code itself).
              </td>
            </tr>
          </tbody>
        </table>
        <p>
          你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。
          //TODO translation needed
          To do so, simply extend
          the
          <tt>org.apache.ibatis.type.BaseTypeHandler</tt> class and optionally map your new
          <tt>TypeHandler</tt> class to a JDBC type. 例如:
        </p>
        <div class="source"><pre class="prettyprint"><span class="com">// ExampleTypeHandler.java</span><span class="pln">
</span><span class="lit">@MappedJdbcTypes</span><span class="pun">(</span><span class="typ">JdbcType</span><span class="pun">.</span><span class="pln">VARCHAR</span><span class="pun">)</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ExampleTypeHandler</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">BaseTypeHandler</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setNonNullParameter</span><span class="pun">(</span><span class="typ">PreparedStatement</span><span class="pln"> ps</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> i</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> parameter</span><span class="pun">,</span><span class="pln"> </span><span class="typ">JdbcType</span><span class="pln"> jdbcType</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">SQLException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    ps</span><span class="pun">.</span><span class="pln">setString</span><span class="pun">(</span><span class="pln">i</span><span class="pun">,</span><span class="pln"> parameter</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getNullableResult</span><span class="pun">(</span><span class="typ">ResultSet</span><span class="pln"> rs</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> columnName</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">SQLException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> rs</span><span class="pun">.</span><span class="pln">getString</span><span class="pun">(</span><span class="pln">columnName</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getNullableResult</span><span class="pun">(</span><span class="typ">ResultSet</span><span class="pln"> rs</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> columnIndex</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">SQLException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> rs</span><span class="pun">.</span><span class="pln">getString</span><span class="pun">(</span><span class="pln">columnIndex</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getNullableResult</span><span class="pun">(</span><span class="typ">CallableStatement</span><span class="pln"> cs</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> columnIndex</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">SQLException</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> cs</span><span class="pun">.</span><span class="pln">getString</span><span class="pun">(</span><span class="pln">columnIndex</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre></div>

        <div class="source"><pre class="prettyprint"><span class="com">&lt;!-- mybatis-config.xml --&gt;</span><span class="pln">
</span><span class="tag">&lt;typeHandlers&gt;</span><span class="pln">
  </span><span class="tag">&lt;typeHandler</span><span class="pln"> </span><span class="atn">handler</span><span class="pun">=</span><span class="atv">"org.mybatis.example.ExampleTypeHandler"</span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/typeHandlers&gt;</span></pre></div>

        <p>
        使用这样的类型处理器将会覆盖已经存在的处理 Java 的 String 类型属性和 VARCHAR
参数及结果的类型处理器。
要注意 MyBatis 不会审视数据库元信息来决定使用哪种类型,
所
以你必须在参数和结果映射中指定那是 VARCHAR 类型的字段,来绑定到正确的类型处理
器上。这是因为 MyBatis 直到语句被执行都不知道数据类型的这个现实导致的。
        </p>
        <p>
          // TODO translation needed
          MyBatis will know the the Java type that you want to handle with
          this TypeHandler by introspecting its generic type, but 
          you can override this behavior by two means:
        </p>
        <ul>
          <li>Adding a <tt>javaType</tt> attribute to the typeHandler element (for example: <tt>javaType="String"</tt>)
          </li> 
          <li>Adding a <tt>@MappedTypes</tt> annotation to your <tt>TypeHandler</tt> class specifying 
          the list of java types to associate it with. This annotation will be ignored if 
          the <tt>javaType</tt> attribute as also been specified.
          </li>
        </ul>

        <p>Associated JDBC type can be specified by two means:</p>
        <ul>
          <li>
           Adding a <tt>jdbcType</tt> attribute to the typeHandler element (for example: <tt>jdbcType=VARCHAR</tt>).
          </li>
          <li>Adding a <tt>@MappedJdbcTypes</tt> annotation to your TypeHandler class specifying 
          the list of JDBC types to associate it with. This annotation will be ignored if 
          the <tt>jdbcType</tt> attribute as also been specified.
          </li>
        </ul>

        <p>And finally you can let MyBatis search for your TypeHandlers:</p>
        <div class="source"><pre class="prettyprint"><span class="com">&lt;!-- mybatis-config.xml --&gt;</span><span class="pln">
</span><span class="tag">&lt;typeHandlers&gt;</span><span class="pln">
  </span><span class="tag">&lt;package</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"org.mybatis.example"</span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/typeHandlers&gt;</span></pre></div>

        <p>
          Note that when using the autodiscovery feature JDBC types can only be
          specified with annotations.
        </p>
        <p>
          You can create a generic TypeHandler that is able to handle more than one class. For that purpose  
          add a constructor that receives the class as a parameter and MyBatis will pass the actual class when
          constructing the TypeHandler.
        </p>

        <div class="source"><pre class="prettyprint"><span class="com">//GenericTypeHandler.java</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">GenericTypeHandler</span><span class="pun">&lt;</span><span class="pln">E </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">MyObject</span><span class="pun">&gt;</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">BaseTypeHandler</span><span class="pun">&lt;</span><span class="pln">E</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Class</span><span class="pun">&lt;</span><span class="pln">E</span><span class="pun">&gt;</span><span class="pln"> type</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">GenericTypeHandler</span><span class="pun">(</span><span class="typ">Class</span><span class="pun">&lt;</span><span class="pln">E</span><span class="pun">&gt;</span><span class="pln"> type</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">type </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">IllegalArgumentException</span><span class="pun">(</span><span class="str">"Type argument cannot be null"</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">type </span><span class="pun">=</span><span class="pln"> type</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
  </span><span class="pun">...</span></pre></div>

		<p><tt>EnumTypeHandler</tt> and <tt>EnumOrdinalTypeHandler</tt> are generic TypeHandlers. We will learn 
		about them in the following section. 
		</p>

      </div>
      
      <div class="section"><h3>Handling Enums<a name="Handling_Enums"></a></h3>
      	<p>
      	  If you want to map an <tt>Enum</tt>, you'll need to use either
      	  <tt>EnumTypeHandler</tt> or <tt>EnumOrdinalTypeHandler</tt>. 
      	</p>
      	
      	<p>For example, let's say that we need to store the rounding mode that 
      	should be used with some number if it needs to be rounded. By default, MyBatis
      	uses <tt>EnumTypeHandler</tt> to convert the <tt>Enum</tt>
      	values to their names.
      	</p>
      	
      	<b>Note <tt>EnumTypeHandler</tt> is special in the sense that unlike other handlers, 
      	it does not handle just one specific class, but any class that extends <tt>Enum</tt></b>

      	<p>However, we may not want to store names. Our DBA may insist on an 
      	integer code instead. That's just as easy: add <tt>EnumOrdinalTypeHandler</tt>
      	to the <tt>typeHandlers</tt> in your config file, and now each
      	<tt>RoundingMode</tt> will be mapped to an integer using its ordinal value.     	
      	</p>
       <div class="source"><pre class="prettyprint"><span class="com">&lt;!-- mybatis-config.xml --&gt;</span><span class="pln">
</span><span class="tag">&lt;typeHandlers&gt;</span><span class="pln">
  </span><span class="tag">&lt;typeHandler</span><span class="pln"> </span><span class="atn">handler</span><span class="pun">=</span><span class="atv">"org.apache.ibatis.type.EnumOrdinalTypeHandler"</span><span class="pln"> </span><span class="atn">javaType</span><span class="pun">=</span><span class="atv">"java.math.RoundingMode"</span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/typeHandlers&gt;</span></pre></div>
		<p>
		  But what if you want to map the same <tt>Enum</tt> to a 
		  string in one place and to integer in another? 
		</p>
      	<p>
      	  The auto-mapper will automatically use <tt>EnumOrdinalTypeHandler</tt>, 
      	  so if we want to go back to using plain old ordinary
      	  <tt>EnumTypeHandler</tt>, we have to tell it, by explicitly setting 
      	  the type handler to use for those SQL statements. 
      	</p>
      	<p>
      	  (Mapper files aren't covered until the next section, so if this is your first
      	  time reading through the documentation, you may want to skip this for now
      	  and come back to it later.)
      	</p>
      	<div class="source"><pre class="prettyprint"><span class="dec">&lt;!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span><span class="pln">

</span><span class="dec">&lt;!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span><span class="pln">

</span><span class="tag">&lt;mapper</span><span class="pln"> </span><span class="atn">namespace</span><span class="pun">=</span><span class="atv">"org.apache.ibatis.submitted.rounding.Mapper"</span><span class="tag">&gt;</span><span class="pln">
	</span><span class="tag">&lt;resultMap</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"org.apache.ibatis.submitted.rounding.User"</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"usermap"</span><span class="tag">&gt;</span><span class="pln">
		</span><span class="tag">&lt;id</span><span class="pln"> </span><span class="atn">column</span><span class="pun">=</span><span class="atv">"id"</span><span class="pln"> </span><span class="atn">property</span><span class="pun">=</span><span class="atv">"id"</span><span class="tag">/&gt;</span><span class="pln">
		</span><span class="tag">&lt;result</span><span class="pln"> </span><span class="atn">column</span><span class="pun">=</span><span class="atv">"name"</span><span class="pln"> </span><span class="atn">property</span><span class="pun">=</span><span class="atv">"name"</span><span class="tag">/&gt;</span><span class="pln">
		</span><span class="tag">&lt;result</span><span class="pln"> </span><span class="atn">column</span><span class="pun">=</span><span class="atv">"funkyNumber"</span><span class="pln"> </span><span class="atn">property</span><span class="pun">=</span><span class="atv">"funkyNumber"</span><span class="tag">/&gt;</span><span class="pln">
		</span><span class="tag">&lt;result</span><span class="pln"> </span><span class="atn">column</span><span class="pun">=</span><span class="atv">"roundingMode"</span><span class="pln"> </span><span class="atn">property</span><span class="pun">=</span><span class="atv">"roundingMode"</span><span class="tag">/&gt;</span><span class="pln">
	</span><span class="tag">&lt;/resultMap&gt;</span><span class="pln">

	</span><span class="tag">&lt;select</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"getUser"</span><span class="pln"> </span><span class="atn">resultMap</span><span class="pun">=</span><span class="atv">"usermap"</span><span class="tag">&gt;</span><span class="pln">
		select * from users
	</span><span class="tag">&lt;/select&gt;</span><span class="pln">
	</span><span class="tag">&lt;insert</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"insert"</span><span class="pln"> </span><span class="atn">parameterType</span><span class="pun">=</span><span class="atv">"org.apache.ibatis.submitted.rounding.User"</span><span class="tag">&gt;</span><span class="pln">
	    insert into users (id, name, funkyNumber, roundingMode) values (
	    	#{id}, #{name}, #{funkyNumber}, #{roundingMode}
	    )
	</span><span class="tag">&lt;/insert&gt;</span><span class="pln">
	
	</span><span class="tag">&lt;resultMap</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"org.apache.ibatis.submitted.rounding.User"</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"usermap2"</span><span class="tag">&gt;</span><span class="pln">
		</span><span class="tag">&lt;id</span><span class="pln"> </span><span class="atn">column</span><span class="pun">=</span><span class="atv">"id"</span><span class="pln"> </span><span class="atn">property</span><span class="pun">=</span><span class="atv">"id"</span><span class="tag">/&gt;</span><span class="pln">
		</span><span class="tag">&lt;result</span><span class="pln"> </span><span class="atn">column</span><span class="pun">=</span><span class="atv">"name"</span><span class="pln"> </span><span class="atn">property</span><span class="pun">=</span><span class="atv">"name"</span><span class="tag">/&gt;</span><span class="pln">
		</span><span class="tag">&lt;result</span><span class="pln"> </span><span class="atn">column</span><span class="pun">=</span><span class="atv">"funkyNumber"</span><span class="pln"> </span><span class="atn">property</span><span class="pun">=</span><span class="atv">"funkyNumber"</span><span class="tag">/&gt;</span><span class="pln">
		</span><span class="tag">&lt;result</span><span class="pln"> </span><span class="atn">column</span><span class="pun">=</span><span class="atv">"roundingMode"</span><span class="pln"> </span><span class="atn">property</span><span class="pun">=</span><span class="atv">"roundingMode"</span><span class="pln"> </span><span class="atn">typeHandler</span><span class="pun">=</span><span class="atv">"org.apache.ibatis.type.EnumTypeHandler"</span><span class="tag">/&gt;</span><span class="pln">
	</span><span class="tag">&lt;/resultMap&gt;</span><span class="pln">
	</span><span class="tag">&lt;select</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"getUser2"</span><span class="pln"> </span><span class="atn">resultMap</span><span class="pun">=</span><span class="atv">"usermap2"</span><span class="tag">&gt;</span><span class="pln">
		select * from users2
	</span><span class="tag">&lt;/select&gt;</span><span class="pln">
	</span><span class="tag">&lt;insert</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"insert2"</span><span class="pln"> </span><span class="atn">parameterType</span><span class="pun">=</span><span class="atv">"org.apache.ibatis.submitted.rounding.User"</span><span class="tag">&gt;</span><span class="pln">
	    insert into users2 (id, name, funkyNumber, roundingMode) values (
	    	#{id}, #{name}, #{funkyNumber}, #{roundingMode, typeHandler=org.apache.ibatis.type.EnumTypeHandler}
	    )
	</span><span class="tag">&lt;/insert&gt;</span><span class="pln">

</span><span class="tag">&lt;/mapper&gt;</span></pre></div>
		<p>
		  Note that this forces us to use a <tt>resultMap</tt> 
		  instead of a <tt>resultType</tt> in our select statements.
		</p>
      </div>

      <div class="section"><h3>objectFactory<a name="objectFactory"></a></h3>
        <p>
          MyBatis 每次创建结果对象新的实例时,
它使用一个 ObjectFactory 实例来完成。
如果参
数映射存在,默认的 ObjectFactory 不比使用默认构造方法或带参数的构造方法实例化目标
类做的工作多。如果你想重写默认的 ObjectFactory,你可以创建你自己的。比如:
        </p>
        <div class="source"><pre class="prettyprint"><span class="com">// ExampleObjectFactory.java</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ExampleObjectFactory</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">DefaultObjectFactory</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> create</span><span class="pun">(</span><span class="typ">Class</span><span class="pln"> type</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">super</span><span class="pun">.</span><span class="pln">create</span><span class="pun">(</span><span class="pln">type</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> create</span><span class="pun">(</span><span class="typ">Class</span><span class="pln"> type</span><span class="pun">,</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Class</span><span class="pun">&gt;</span><span class="pln"> constructorArgTypes</span><span class="pun">,</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Object</span><span class="pun">&gt;</span><span class="pln"> constructorArgs</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">super</span><span class="pun">.</span><span class="pln">create</span><span class="pun">(</span><span class="pln">type</span><span class="pun">,</span><span class="pln"> constructorArgTypes</span><span class="pun">,</span><span class="pln"> constructorArgs</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setProperties</span><span class="pun">(</span><span class="typ">Properties</span><span class="pln"> properties</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">super</span><span class="pun">.</span><span class="pln">setProperties</span><span class="pun">(</span><span class="pln">properties</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre></div>

        <div class="source"><pre class="prettyprint"><span class="com">&lt;!-- mybatis-config.xml --&gt;</span><span class="pln">
</span><span class="tag">&lt;objectFactory</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"org.mybatis.example.ExampleObjectFactory"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"someProperty"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"100"</span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/objectFactory&gt;</span></pre></div>
        <p>
          ObjectFactory 接口很简单。它包含两个创建用的方法,一个是处理默认构造方法的,另
外一个是处理带参数构造方法的。最终,setProperties 方法可以被用来配置 ObjectFactory。
在 初 始化 你 的 ObjectFactory 实例 后 , objectFactory 元素 体 中定 义的 属 性会 被传 递 给
setProperties 方法。
        </p>

      </div>
      <div class="section"><h3>plugins<a name="plugins"></a></h3>
        <p>
          MyBatis 允许你在某一点拦截已映射语句执行的调用。默认情况下,MyBatis 允许使用
插件来拦截方法调用:
        </p>
        <ul>
          <li>
            Executor
            (update, query, flushStatements, commit, rollback,
            getTransaction, close,
            isClosed)
          </li>
          <li>
            ParameterHandler
            (getParameterObject, setParameters)
          </li>
          <li>
            ResultSetHandler
            (handleResultSets, handleOutputParameters)
          </li>
          <li>
            StatementHandler
            (prepare, parameterize, batch, update, query)
          </li>
        </ul>
        <p>
这些类中方法的详情可以通过查看每个方法的签名来发现 ,而且它们的源代码在
MyBatis 的发行包中有。你应该理解你覆盖方法的行为,假设你所做的要比监视调用要多。
如果你尝试修改或覆盖一个给定的方法,
你可能会打破 MyBatis 的核心。
这是低层次的类和
方法,要谨慎使用插件。
        </p>
        <p>
使用插件是它们提供的非常简单的力量。
简单实现拦截器接口,
要确定你想拦截的指定
签名。
        </p>

        <div class="source"><pre class="prettyprint"><span class="com">// ExamplePlugin.java</span><span class="pln">
</span><span class="lit">@Intercepts</span><span class="pun">({</span><span class="lit">@Signature</span><span class="pun">(</span><span class="pln">
  type</span><span class="pun">=</span><span class="pln"> </span><span class="typ">Executor</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">,</span><span class="pln">
  method </span><span class="pun">=</span><span class="pln"> </span><span class="str">"update"</span><span class="pun">,</span><span class="pln">
  args </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="typ">MappedStatement</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">,</span><span class="typ">Object</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">})})</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ExamplePlugin</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">Interceptor</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> intercept</span><span class="pun">(</span><span class="typ">Invocation</span><span class="pln"> invocation</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Throwable</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> invocation</span><span class="pun">.</span><span class="pln">proceed</span><span class="pun">();</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> plugin</span><span class="pun">(</span><span class="typ">Object</span><span class="pln"> target</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Plugin</span><span class="pun">.</span><span class="pln">wrap</span><span class="pun">(</span><span class="pln">target</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setProperties</span><span class="pun">(</span><span class="typ">Properties</span><span class="pln"> properties</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre></div>

        <div class="source"><pre class="prettyprint"><span class="com">&lt;!-- mybatis-config.xml --&gt;</span><span class="pln">
</span><span class="tag">&lt;plugins&gt;</span><span class="pln">
  </span><span class="tag">&lt;plugin</span><span class="pln"> </span><span class="atn">interceptor</span><span class="pun">=</span><span class="atv">"org.mybatis.example.ExamplePlugin"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"someProperty"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"100"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;/plugin&gt;</span><span class="pln">
</span><span class="tag">&lt;/plugins&gt;</span></pre></div>
        <p>
上面的插件将会拦截在 Executor 实例中所有的“update”方法调用,它也是负责低层次
映射语句执行的内部对象。
        </p>
        <p><span class="label important">NOTE</span>
          <b>覆盖配置类
          </b>
        </p>
        <p>
除了用插件来修改 MyBatis 核心行为之外,
你也可以完全覆盖配置类。
简单扩展它,
然后覆盖其中的任意方法,之后传递它到 sqlSessionFactoryBuilder.build(myConfig)方法
的调用。这可能会严重影响 MyBatis 的行为,所以要小心。
        </p>
      </div>
      <div class="section"><h3>environments<a name="environments"></a></h3>
        <p>
MyBatis 可以配置多种环境。这会帮助你将 SQL 映射应用于多种数据库之中。例如,
你也许为开发要设置不同的配置,
测试和生产环境。
或者你可能有多种生产级数据库却共享
相同的模式,所以你会想对不同数据库使用相同的 SQL 映射。这种用例是很多的。
        </p>
        <p>
          <b>一个很重要的问题要记得:你可以配置多种环境,但你只能为每个 SqlSessionFactory
实例选择一个。</b>
        </p>
        <p>
          所以,如果你想连接两个数据库,你需要创建两个 SqlSessionFactory 实例,每个数据库
对应一个。而如果是三个数据库,你就需要三个实例,以此类推。记忆起来很简单:
        </p>
        <ul>
          <li>
            <b>每个数据库对应一个 SqlSessionFactory
            </b>
          </li>
        </ul>
        <p>
为了明确创建哪种环境,你可以将它作为可选的参数传递给 SqlSessionFactoryBuilder。
可以接受环境配置的两个方法签名是:
        </p>

        <div class="source"><pre class="prettyprint"><span class="typ">SqlSessionFactory</span><span class="pln"> factory </span><span class="pun">=</span><span class="pln"> sqlSessionFactoryBuilder</span><span class="pun">.</span><span class="pln">build</span><span class="pun">(</span><span class="pln">reader</span><span class="pun">,</span><span class="pln"> environment</span><span class="pun">);</span><span class="pln">
</span><span class="typ">SqlSessionFactory</span><span class="pln"> factory </span><span class="pun">=</span><span class="pln"> sqlSessionFactoryBuilder</span><span class="pun">.</span><span class="pln">build</span><span class="pun">(</span><span class="pln">reader</span><span class="pun">,</span><span class="pln"> environment</span><span class="pun">,</span><span class="pln">properties</span><span class="pun">);</span></pre></div>

        <p>如果环境被忽略,那么默认环境将会被加载,如下进行:
        </p>

        <div class="source"><pre class="prettyprint"><span class="typ">SqlSessionFactory</span><span class="pln"> factory </span><span class="pun">=</span><span class="pln"> sqlSessionFactoryBuilder</span><span class="pun">.</span><span class="pln">build</span><span class="pun">(</span><span class="pln">reader</span><span class="pun">);</span><span class="pln">
</span><span class="typ">SqlSessionFactory</span><span class="pln"> factory </span><span class="pun">=</span><span class="pln"> sqlSessionFactoryBuilder</span><span class="pun">.</span><span class="pln">build</span><span class="pun">(</span><span class="pln">reader</span><span class="pun">,</span><span class="pln">properties</span><span class="pun">);</span></pre></div>

        <p>环境元素定义了如何配置环境。
        </p>

        <div class="source"><pre class="prettyprint"><span class="tag">&lt;environments</span><span class="pln"> </span><span class="atn">default</span><span class="pun">=</span><span class="atv">"development"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;environment</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"development"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;transactionManager</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"JDBC"</span><span class="tag">&gt;</span><span class="pln">
      </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"..."</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"..."</span><span class="tag">/&gt;</span><span class="pln">
    </span><span class="tag">&lt;/transactionManager&gt;</span><span class="pln">
    </span><span class="tag">&lt;dataSource</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"POOLED"</span><span class="tag">&gt;</span><span class="pln">
      </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"driver"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"${driver}"</span><span class="tag">/&gt;</span><span class="pln">
      </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"url"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"${url}"</span><span class="tag">/&gt;</span><span class="pln">
      </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"username"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"${username}"</span><span class="tag">/&gt;</span><span class="pln">
      </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"password"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"${password}"</span><span class="tag">/&gt;</span><span class="pln">
    </span><span class="tag">&lt;/dataSource&gt;</span><span class="pln">
  </span><span class="tag">&lt;/environment&gt;</span><span class="pln">
</span><span class="tag">&lt;/environments&gt;</span></pre></div>
        <p>
          注意这里的键:
        </p>
        <ul>
          <li>
            默认的环境 ID(比如:default=”development”)。
          </li>
          <li>
            每个 environment 元素定义的环境 ID(比如:id=”development”)。
          </li>
          <li>
            事务管理器的配置(比如:type=”JDBC”)。
          </li>
          <li>
            数据源的配置(比如:type=”POOLED”)。
          </li>
        </ul>
        <p>
          默认的环境和环境 ID 是自我解释的。你可以使用你喜欢的名称来命名,只要确定默认
的要匹配其中之一。
        </p>
        <p>
          <b>transactionManager</b>
        </p>
        <p>
在 MyBatis 中有两种事务管理器类型(也就是 type=”[JDBC|MANAGED]”):
        </p>
        <ul>
          <li>
JDBC – 这个配置直接简单使用了 JDBC 的提交和回滚设置。
它依赖于从数据源得
到的连接来管理事务范围。
          </li>
          <li>
MANAGED – 这个配置几乎没做什么。它从来不提交或回滚一个连接。而它会让
容器来管理事务的整个生命周期(比如 Spring 或 JEE 应用服务器的上下文)
默认
情况下它会关闭连接。
然而一些容器并不希望这样,
因此如果你需要从连接中停止
它,将 closeConnection 属性设置为 false。例如:
            <div class="source"><pre class="prettyprint"><span class="tag">&lt;transactionManager</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"MANAGED"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"closeConnection"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"false"</span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/transactionManager&gt;</span></pre></div>
          </li>
        </ul>
        <p>
          <span class="label important">NOTE</span>
          If you are planning to use MyBatis with Spring there is no need to configure
          any TransactionManager because the Spring module will set its own one 
          overriding any previously set configuration.  
        </p>
        <p>
这两种事务管理器都不需要任何属性。然而它们都是类型别名,要替换使用它们,你需
要放置将你自己的类的完全限定名或类型别名,它们引用了你对 TransactionFactory 接口的实现
类。
        </p>
        <div class="source"><pre class="prettyprint"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">TransactionFactory</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">void</span><span class="pln"> setProperties</span><span class="pun">(</span><span class="typ">Properties</span><span class="pln"> props</span><span class="pun">);</span><span class="pln">  
  </span><span class="typ">Transaction</span><span class="pln"> newTransaction</span><span class="pun">(</span><span class="typ">Connection</span><span class="pln"> conn</span><span class="pun">);</span><span class="pln">
  </span><span class="typ">Transaction</span><span class="pln"> newTransaction</span><span class="pun">(</span><span class="typ">DataSource</span><span class="pln"> dataSource</span><span class="pun">,</span><span class="pln"> </span><span class="typ">TransactionIsolationLevel</span><span class="pln"> level</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> autoCommit</span><span class="pun">);</span><span class="pln">  
</span><span class="pun">}</span></pre></div>
        <p>
任何在 XML 中配置的属性在实例化之后将会被传递给 setProperties()方法。
你的实现类
需要创建一个事务接口的实现,这个接口也很简单:
        </p>
        <div class="source"><pre class="prettyprint"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">Transaction</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="typ">Connection</span><span class="pln"> getConnection</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">SQLException</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">void</span><span class="pln"> commit</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">SQLException</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">void</span><span class="pln"> rollback</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">SQLException</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">void</span><span class="pln"> close</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">SQLException</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></pre></div>
        <p>
使用这两个接口,你可以完全自定义 MyBatis 对事务的处理。
        </p>
        <p>
          <b>dataSource</b>
        </p>
        <p>
dataSource 元素使用基本的 JDBC 数据源接口来配置 JDBC 连接对象的资源。
        </p>
        <ul>
          <li>许多 MyBatis 的应用程序将会按示例中的例子来配置数据源。
然而它并不是必须的。
要知道为了方便使用延迟加载,数据源才是必须的。
          </li>
        </ul>
        <p>有三种内建的数据源类型(也就是 type=”???”):
        </p>
        <p>
          <b>UNPOOLED</b>
– 这个数据源的实现是每次被请求时简单打开和关闭连接。它有一点慢,
这是对简单应用程序的一个很好的选择,
因为它不需要及时的可用连接。
不同的数据库对这
个的表现也是不一样的,
所以对某些数据库来说配置数据源并不重要,
这个配置也是闲置的。
UNPOOLED 类型的数据源仅仅用来配置以下 5 种属性:
        </p>
        <ul>
          <li><tt>driver</tt> – 这是 JDBC 驱动的 Java 类的完全限定名(如果你的驱动包含,它也不是
              数据源类)。
          </li>
          <li><tt>url</tt> – 这是数据库的 JDBC URL 地址。
          </li>
          <li><tt>username</tt> – 登录数据库的用户名。
          </li>
          <li><tt>password</tt> – 登录数据库的密码。
          </li>
          <li><tt>defaultTransactionIsolationLevel</tt> – 默认的连接事务隔离级别。
          </li>
        </ul>
        <p>
作为可选项,你可以传递数据库驱动的属性。要这样做,属性的前缀是以“driver.”开
头的,例如:
        </p>
        <ul>
          <li><tt>driver.encoding=UTF8</tt></li>
        </ul>
        <p>
这 样 就 会 传 递 以 值 “ UTF8 ” 来 传 递 属 性 “ encoding ”, 它 是 通 过
DriverManager.getConnection(url,driverProperties)方法传递给数据库驱动。
        </p>
        <p>
          <b>POOLED</b>
          – 这是 JDBC 连接对象的数据源连接池的实现,用来避免创建新的连接实例
时必要的初始连接和认证时间。这是一种当前 Web 应用程序用来快速响应请求很流行的方
法。
        </p>
        <p>
除了上述(UNPOOLED)的属性之外,还有很多属性可以用来配置 POOLED 数据源:
        </p>
        <ul>
          <li><tt>poolMaximumActiveConnections</tt> – 在任意时间存在的活动(也就是正在使用)连
接的数量。默认值:10
          </li>
          <li><tt>poolMaximumIdleConnections</tt> – 任意时间存在的空闲连接数。

          </li>
          <li><tt>poolMaximumCheckoutTime</tt> – 在被强制返回之前,池中连接被检查的时间。默认
值:20000 毫秒(也就是 20 秒)
          </li>
          <li><tt>poolTimeToWait</tt> – 这是给连接池一个打印日志状态机会的低层次设置,还有重新
尝试获得连接,
这些情况下往往需要很长时间
为了避免连接池没有配置时静默失
败)。默认值:20000 毫秒(也就是 20 秒)
          </li>
          <li><tt>poolPingQuery</tt> – 发送到数据的侦测查询,用来验证连接是否正常工作,并且准备
接受请求。默认是“NO PING QUERY SET”
,这会引起许多数据库驱动连接由一
个错误信息而导致失败。
          </li>
          <li><tt>poolPingEnabled</tt> – 这是开启或禁用侦测查询。如果开启,你必须用一个合法的
SQL 语句(最好是很快速的)设置 poolPingQuery 属性。默认值:false。
          </li>
          <li><tt>poolPingConnectionsNotUsedFor</tt> – 这是用来配置 poolPingQuery 多次时间被用一次。
这可以被设置匹配标准的数据库连接超时时间,
来避免不必要的侦测。
默认值:
0(也就是所有连接每一时刻都被侦测-但仅仅当 poolPingEnabled 为 true 时适用)。
          </li>
        </ul>
        <p>
          <b>JNDI</b>
          – 这个数据源的实现是为了使用如 Spring 或应用服务器这类的容器,
容器可以集
中或在外部配置数据源,然后放置一个 JNDI 上下文的引用。这个数据源配置只需要两个属
性:
        </p>
        <ul>
          <li><tt>initial_context</tt> – 这 个 属 性 用 来 从 初 始 上 下 文 中 寻 找 环 境 ( 也 就 是
initialContext.lookup(initial——context) 。这是个可选属性,如果被忽略,那么
data_source 属性将会直接以 initialContext 为背景再次寻找。
          </li>
          <li><tt>data_source</tt> – 这是引用数据源实例位置的上下文的路径。它会以由 initial_context
查询返回的环境为背景来查找,如果 initial_context 没有返回结果时,直接以初始
上下文为环境来查找。
          </li>
        </ul>
        <p>和其他数据源配置相似,
它也可以通过名为
“env.”
的前缀直接向初始上下文发送属性。
比如:
        </p>
        <ul>
          <li><tt>env.encoding=UTF8</tt></li>
        </ul>
        <p>
在初始化之后,这就会以值“UTF8”向初始上下文的构造方法传递名为“encoding”
的属性。
        </p>
      </div>
      
      <div class="section"><h3>databaseIdProvider<a name="databaseIdProvider"></a></h3>
        <p>
          MyBatis is able to execute different statements depending on your database vendor. 
          The multi-db vendor support is based on the mapped statements <tt>databaseId</tt> attribute. 
          MyBatis will load all statements with no <tt>databaseId</tt> attribute 
          or with a <tt>databaseId</tt> that matches the current one. If case the same statement
          if found with and without the <tt>databaseId</tt> the latter will be discarded.  
          To enable the multi vendor support add a <tt>databaseIdProvider</tt>
          to mybatis-config.xml file as follows:
        </p>
        
        <div class="source"><pre class="prettyprint"><span class="tag">&lt;databaseIdProvider</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"DB_VENDOR"</span><span class="pln"> </span><span class="tag">/&gt;</span></pre></div>

		<p> 
		  The DB_VENDOR implementation databaseIdProvider sets as a databaseId the String returned by 
		  <tt>DatabaseMetaData#getDatabaseProductName()</tt>. 
		  As usually that string is too long and also, different versions of the same product return different values, 
		  so you may want to translate it to a shorter one by adding properties like follows:
		</p>
		
        <div class="source"><pre class="prettyprint"><span class="tag">&lt;databaseIdProvider</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"DB_VENDOR"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"SQL Server"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"sqlserver"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"DB2"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"db2"</span><span class="tag">/&gt;</span><span class="pln">        
  </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"Oracle"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"oracle"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/databaseIdProvider&gt;</span></pre></div>

		<p> 
		  When properties are provided, the DB_VENDOR databaseIdProvider will search the property value corresponding to the 
		  first key found in the returned database product name or "null" if there is not a matching property. 
		  In this case, if <tt>getDatabaseProductName()</tt> returns "Oracle (DataDirect)" the databaseId will be set to "oracle".  
		</p>
		
		<p>
		  You can build your own database provider by implementing the interface <tt>org.apache.ibatis.mapping.DatabaseIdProvider</tt>
		  and registerin it in mybatis-config.xml:
		</p>

        <div class="source"><pre class="prettyprint"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">DatabaseIdProvider</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">void</span><span class="pln"> setProperties</span><span class="pun">(</span><span class="typ">Properties</span><span class="pln"> p</span><span class="pun">);</span><span class="pln">
  
  </span><span class="typ">String</span><span class="pln"> getDatabaseId</span><span class="pun">(</span><span class="typ">DataSource</span><span class="pln"> dataSource</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">SQLException</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></pre></div>

      </div>
      
      <div class="section"><h3>mappers<a name="mappers"></a></h3>
        <p>
既然 MyBatis 的行为已经由上述元素配置完了,我们现在就要定义 SQL 映射语句了。
但是,
首先我们需要告诉 MyBatis 到哪里去找到这些语句。
Java 在这方面没有提供一个很好
的方法,
所以最佳的方式是告诉 MyBatis 到哪里去找映射文件。
你可以使用相对于类路径的
资源引用,或者字符表示,或 url 引用的完全限定名(包括 file:///URLs)
。例如:
        </p>
        <div class="source"><pre class="prettyprint"><span class="com">&lt;!-- Using classpath relative resources --&gt;</span><span class="pln">
</span><span class="tag">&lt;mappers&gt;</span><span class="pln">
  </span><span class="tag">&lt;mapper</span><span class="pln"> </span><span class="atn">resource</span><span class="pun">=</span><span class="atv">"org/mybatis/builder/AuthorMapper.xml"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;mapper</span><span class="pln"> </span><span class="atn">resource</span><span class="pun">=</span><span class="atv">"org/mybatis/builder/BlogMapper.xml"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;mapper</span><span class="pln"> </span><span class="atn">resource</span><span class="pun">=</span><span class="atv">"org/mybatis/builder/PostMapper.xml"</span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/mappers&gt;</span></pre></div>

        <div class="source"><pre class="prettyprint"><span class="com">&lt;!-- Using url fully qualified paths --&gt;</span><span class="pln">
</span><span class="tag">&lt;mappers&gt;</span><span class="pln">
  </span><span class="tag">&lt;mapper</span><span class="pln"> </span><span class="atn">url</span><span class="pun">=</span><span class="atv">"file:///var/mappers/AuthorMapper.xml"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;mapper</span><span class="pln"> </span><span class="atn">url</span><span class="pun">=</span><span class="atv">"file:///var/mappers/BlogMapper.xml"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;mapper</span><span class="pln"> </span><span class="atn">url</span><span class="pun">=</span><span class="atv">"file:///var/mappers/PostMapper.xml"</span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/mappers&gt;</span></pre></div>

        <div class="source"><pre class="prettyprint"><span class="com">&lt;!-- Using mapper interface classes --&gt;</span><span class="pln">
</span><span class="tag">&lt;mappers&gt;</span><span class="pln">
  </span><span class="tag">&lt;mapper</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.mybatis.builder.AuthorMapper"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;mapper</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.mybatis.builder.BlogMapper"</span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;mapper</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"org.mybatis.builder.PostMapper"</span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/mappers&gt;</span></pre></div>

        <div class="source"><pre class="prettyprint"><span class="com">&lt;!-- Register all interfaces in a package as mappers --&gt;</span><span class="pln">
</span><span class="tag">&lt;mappers&gt;</span><span class="pln">
  </span><span class="tag">&lt;package</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"org.mybatis.builder"</span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/mappers&gt;</span></pre></div>

        <p>
这些语句简单告诉了 MyBatis 去哪里找映射文件。其余的细节就是在每个 SQL 映射文
件中了,下面的部分我们来讨论 SQL 映射文件。
        </p>
      </div>
    </div>
  

                  </div>
            </div>
          </div>

    <hr>

    <footer>
            <div class="container-fluid">
              <div class="row span12">Copyright ©                    2010-2013
                        <a href="http://www.mybatis.org/">MyBatis.org</a>.
            All Rights Reserved.      
                    
      </div>

        
        
                </div>
    </footer>
  

</body></html>